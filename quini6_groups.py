
#from LotoPlus.src.digit_fx import add_digits
#from LotoPlus.src.digit_fx import substract_digits


#import set_field as sf ## --> este es un archivo de la versiÃ³n pc...
import match_fx as mf


#print(sf.playables)
playables=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,42,43,44,45]

#print(sf.primes)
#print(sf.pairs)

non_primes=[]
pairs=[]
unpairs=[]
relationship_groups=[]

#set non_primes
#for n in playables:
#    if mf.is_number_in(n,primes) == False:
#        non_primes.append(n)
#print(non_primes)
non_primes=[0, 1, 4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 38, 39, 40,42,44,45]
primes=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,43]
relationship_groups.append([non_primes,primes])



#for n in playables:
#    if n%2 ==0:
#        pairs.append(n)
#    else:
#        unpairs.append(n)
#
#print(pairs)
#print(unpairs)
pairs=[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40,42,44]
unpairs=[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41,43,45]
relationship_groups.append([pairs,unpairs])
#print(sf.yellow)
q6_colors={'yellow':[0,1,2,3,4,5,6,7,8,9,10],
         'blue':[11,12,13,14,15,16,17,18,19,20,21],
         'red':[22,23,24,25,26,27,28,29,30,31,32],
         'green': [33,34,35,36,37,38,39,40,41,42,43,44,45]}


colors={'white': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
        'red': [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
        'green': [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],
        'yellow': [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],
        'blue': [40,41,42,43,44,45]}

white=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
red=[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
green=[20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
yellow=[30, 31, 32, 33, 34, 35, 36, 37, 38, 39]
blue=[40,41,42,43,44,45]
relationship_groups.append([white,red,green,yellow,blue])

relationship_groups.append("[0]Prime/Non_Prime-[0][0]Non-Prime,[0][1]Prime; /// [1]Pair/Unpair-[1][0]Pair,[1][1]Unpair; ///[2]Colours-[2][0]White,[2][1]Red,[2][2]Green,[2][3]Yellow,[2][4]Blue; ///[3]This Str...")
print(relationship_groups)

#print(sf.last_digit_groups)
last_digit={0:[0, 10, 20, 30, 40],
            1:[1, 11, 21, 31, 41],
            2:[2, 12, 22, 32,42],
            3:[3, 13, 23, 33,43],
            4:[4, 14, 24, 34,44],
            5:[5, 15, 25, 35,45],
            6:[6, 16, 26, 36],
            7:[7, 17, 27, 37],
            8:[8, 18, 28, 38],
            9:[9, 19, 29, 39]}

#print(sf.add_digits_groups)
#add_digits_group=[]
add_digits_group={0: [0],
                1: [1, 10],
                2: [2, 11, 20],
                3: [3, 12, 21, 30],
                4: [4, 13, 22, 31, 40],
                5: [5, 14, 23, 32, 41],
                6: [6, 15, 24, 33,42], 
                7: [7, 16, 25, 34,43], 
                8: [8, 17, 26, 35,44], 
                9: [9, 18, 27, 36,45], 
                10: [19, 28, 37], 
                11: [29, 38], 
                12: [39]}


rev_substract_digits_group={0: [0, 11, 22, 33,44],
                        -1: [10, 21, 32,43], 
                        -2: [20, 31,42], 
                        -3: [30, 41], 
                        -4: [40], 
                        1: [1,12, 23, 34,45], 
                        2: [2,13, 24, 35], 
                        3: [3,14, 25, 36], 
                        4: [4,15, 26, 37], 
                        5: [5,16, 27, 38], 
                        6: [6,17, 28, 39], 
                        7: [7,18, 29], 
                        8: [8,19],
                        9:[9]}
                        
substract_digits_group={0: [0, 11, 22, 33,44], 
                        -1: [1, 12, 23, 34,45], 
                        -2: [2, 13, 24, 35,], 
                        -3: [3, 14, 25, 36], 
                        -4: [4, 15, 26, 37], 
                        -5: [5, 16, 27, 38], 
                        -6: [6, 17, 28, 39], 
                        -7: [7, 18, 29], 
                        -8: [8, 19], 
                        -9: [9], 
                        1: [10, 21, 32,43], 
                        2: [20, 31,42], 
                        3: [30, 41], 
                        4: [40]}
    
#for i in add_digits_group:
#    print(i)


#print(sf.capicua_numbers)
#print(sf.not_capicua)

palindrome_numbers=[0, (1, 10), (2, 20), (3, 30), (4, 40), 11, (12, 21), (13, 31), (14, 41), 22, (23, 32),(24,42), 33,(34,43),44]
extended_palindrome=[0, 1, 10, 2, 20, 3, 30, 4, 40, 11, 12, 21, 13, 31, 14, 41, 22, 23,24,42, 32, 33,34,43,44]
not_palindrome=[5, 6, 7, 8, 9, 15, 16, 17, 18, 19, 25, 26, 27, 28, 29,35, 36, 37, 38, 39,45]


"""-------------------------This was the first aproach---------------------------------------------------------
addition_series_groups=[{'by_6':([15,51,0,0],[52,87,0,0],[88,123,0,0],[124,159,0,0],[160,195,0,0],[196,231,0,0])},
                        {'by_8':([15,42,0,0],[43,69,0,0],[70,96,0,0],[97,123,0,0],[124,150,0,0],[151,177,0,0],[178,204,0,0],[205,231,0,0])},
                        {'by_9':([15,39,0,0],[40,63,0,0],[64,87,0,0],[88,111,0,0],[112,135,0,0],[136,159,0,0],[160,183,0,0],[184,207,0,0],[208,231,0,0])},
                        {'by_12':([15,33,0,0],[34,51,0,0],[52,69,0,0],[70,87,0,0],[88,105,0,0],[106,123,0,0],[124,141,0,0],[142,159,0,0],[160,177,0,0],[178,195,0,0],[196,213,0,0],[214,231,0,0])},
                        {'by_18':([15,27,0,0],[28,39,0,0],[40,51,0,0],[52,63,0,0],[64,75,0,0],[76,87,0,0],[88,99,0,0],[100,111,0,0],[112,123,0,0],[124,135,0,0],[136,147,0,0],[148,159,0,0],[160,171,0,0],[172,183,0,0],[184,195,0,0],[196,207,0,0],[208,219,0,0],[220,231,0,0])}
                        ]
-----------------------------------------------------------------------------------------------------"""
"""-------------------------------------this is the second approach---------------------------------------------------------------
my_ranges=[{'outside_down':([15,63,0,0],[64,231,0,0])},
            {'medium_down':([15,63,0,0],[64,87,0,0],[88,231,0,0])},
            {'hot':([15,87,0,0],[88,141,0,0],[142,231,0,0])},
            {'medium_up':([15,141,0,0],[142,159,0,0],[160,231,0,0])},
            {'outside_up':([160,231,0,0],[15,159,0,0])}]
-----------------------------------------------------------------------------------------------------"""

#number series ranges
my_ranges2=[{'by_5':([15,54,0,0],[55,85,0,0],[86,124,0,0],[125,185,0,0],[186,231,0,0])},
            {'by_7':([15,54,0,0],[55,81,0,0],[82,107,0,0],[108,133,0,0],[134,159,0,0],[160,231,0,0])}]

number_ranges={'by_5': ([0,1,2,3,4],[5,6,7,8,9],[10,11,12,13,14],[15,16,17,18,19],[20,21,22,23,24],[25,26,27,28,29],[30,31,32,33,34],[35,36,37,38,39],[40,41,42,43,44,45]),
            'by_7': ([0,1,2,3,4,5,6],[7,8,9,10,11,12,13],[14,15,16,17,18,19,20],[21,22,23,24,25,26,27],[28,29,30,31,32,33,34],[35,36,37,38,39,40,41],[42,43,44,45]),
            'by_14': ([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],[31,32,33,34,35,36,37,38,39,40,41,42,43,44,45]),
            'by_half':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],[23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45])}

group_by_digits={0:[0,1,2,3,4,5,6,7,8,9,10,20,30,40],
                1:[1,11,12,13,14,15,16,17,18,19,21,31,41],
                2:[2,12,20,21,22,23,24,25,26,27,28,29,32,42],
                3:[3,13,23,30,31,32,33,34,35,36,37,38,39,43],
                4:[4,14,24,34,40,41,42,43,44,45],
                5:[5,15,25,35,45],
                6:[6,16,26,36],
                7:[7,17,27,37],
                8:[8,18,28,38],
                9:[9,19,29,39]}
#print(len(capicua_numbers))
#for i in extended_palindrome:
#    print(i)

digits_group={0: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40], 
        1: [1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 31, 41], 
        2: [2, 12, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 42], 
        3: [3, 13, 23, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43], 
        4: [4, 14, 24, 34, 40, 41, 42, 43, 44, 45], 
        5: [5, 15, 25, 35, 45], 
        6: [6, 16, 26, 36], 
        7: [7, 17, 27, 37], 
        8: [8, 18, 28, 38], 
        9: [9, 19, 29, 39]}

"""--------criteria of classification-------------------------"""

"""-------------Individuals---------------------------------"""
"""------------by number------------------------------------"""
#1) by pair: -pair / non pair (How many in a single serie?)
#2) by prime: -prime / non prime (How many in a single serie?)
#3) by color: -white / red / green / yellow / blue (How many in a single serie?)

"""------------by digit--------------------------------------"""
#1) by addition    (How many of same group's numbers are in the same serie?)
#2) by substraction  (How many of same group's numbers are in the same serie?)
#3) by inverted substraction  (How many of same group's numbers are in the same serie?)
#4) by last digit  (How many of same group's numbers are in the same serie?)
#5) by palindrome  (How many of same group's numbers are in the same serie?)

"""------------by range---------------------------------------"""

#1) by range - by division: 2,3,6,7,14,21  (How many of same group's numbers are in the same serie?)


"""---------------------Loteries---------------------------------"""
"""--------------------by characteristics---------------------------
#1) total addition of serie's numbers

if len(number_ranges['by_half'][0]) == len(number_ranges['by_half'][1]):
        print('son iguales')
else:
        print('esta mal')
        print(f'$len(number_ranges["by_half"][0])--> {len(number_ranges["by_half"][0])}')
        print(f'$len(number_ranges["by_half"][1])--> {len(number_ranges["by_half"][1])}')

divisibles=[]
for n in range(1,46):
        if 46%n ==0:
                divisibles.append(n)

print(divisibles)  """